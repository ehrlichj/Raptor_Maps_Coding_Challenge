{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jacobehrlich/Desktop/Raptor_Maps_Challenge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/jacobehrlich/Desktop/Raptor_Maps_Challenge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jacobehrlich/Desktop/Raptor_Maps_Challenge/client/src/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar fetch = require('node-fetch');\n\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = \"pk.eyJ1IjoiZWhybGljaGoiLCJhIjoiY2ttdXNnNmh4MG1kajJ2cWVmbzBoZDZldSJ9.0ffP7axpAqza9qSwgm4vaA\";\n\nvar Map = function Map() {\n  _s();\n\n  var mapContainer = useRef(); //intialize lng, lat, and zoom\n\n  var _useState = useState(-70.9),\n      _useState2 = _slicedToArray(_useState, 2),\n      lng = _useState2[0],\n      setLng = _useState2[1];\n\n  var _useState3 = useState(42.35),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lat = _useState4[0],\n      setLat = _useState4[1];\n\n  var _useState5 = useState(5),\n      _useState6 = _slicedToArray(_useState5, 2),\n      zoom = _useState6[0],\n      setZoom = _useState6[1]; //need to keep track of markers on the map for removal\n\n\n  var current_markers = [];\n  useEffect(function () {\n    //intialize map\n    var map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [lng, lat],\n      zoom: zoom\n    }); //After \n\n    map.on('load', function () {\n      var site_id = 0;\n      var delay = 10000;\n      var fetch_Requests = setInterval(function getTechnicianData() {\n        //create fetch url based on site_id parameter\n        var url = \"http://localhost:5000/api/v1/solar_farms/\" + site_id + \"/technicians\";\n        fetch(url) //format response from the api,\n        .then(function (res) {\n          return res.json().then(function (data) {\n            return {\n              status: res.status,\n              body: data\n            };\n          });\n        }).then(function (responseObj) {\n          if (!responseObj.body.valid_site_id) {\n            var ret = \"Invalid Site ID\";\n            return ret;\n          } else {\n            return responseObj.body;\n          }\n        }).then(function (geoData) {\n          console.log(geoData);\n          var technicians_center = [0, 0];\n\n          if (geoData != \"Invalid Site ID\") {\n            var geoDataFeatures = geoData.features;\n\n            while (current_markers.length > 0) {\n              var marker_to_remove = current_markers.pop();\n              marker_to_remove.remove();\n            }\n\n            for (var i = 0; i < geoDataFeatures.length; i++) {\n              var marker = new mapboxgl.Marker({\n                offset: [-120, 0],\n                rotation: geoDataFeatures[i].properties.bearing\n              }).setLngLat(geoDataFeatures[i].geometry.coordinates).addTo(map);\n              current_markers.push(marker);\n              technicians_center[0] += geoDataFeatures[i].geometry.coordinates[0];\n              technicians_center[1] += geoDataFeatures[i].geometry.coordinates[1];\n            }\n\n            technicians_center[0] /= geoDataFeatures.length;\n            technicians_center[1] /= geoDataFeatures.length;\n            console.log(technicians_center);\n            map.flyTo({\n              center: technicians_center,\n              speed: 1.0,\n              zoom: 12\n            });\n            var dangerous_technicians = checkTechnicanDistance(geoData, 304.8);\n            var alert_message;\n\n            if (dangerous_technicians.size > 0) {\n              var alert_message_technicians = \"\";\n\n              var _iterator = _createForOfIteratorHelper(dangerous_technicians),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var tech = _step.value;\n                  alert_message_technicians += tech + \" \";\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              alert_message = \"Unsafe Conditions\\nSite: \" + site_id.toString() + \"\\nTechncians: \" + alert_message_technicians;\n              console.log(alert_message);\n              alert(alert_message);\n            } //console.log(geoData.dangerous_technicians)\n\n          }\n        }).catch(function (err) {\n          return console.log(\"Error: \", err);\n        });\n        site_id += 1;\n\n        if (site_id > 0) {\n          delay = 3000;\n        }\n      }, delay);\n    });\n    map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n    map.on('move', function () {\n      setLng(map.getCenter().lng.toFixed(4));\n      setLat(map.getCenter().lat.toFixed(4));\n      setZoom(map.getZoom().toFixed(2));\n    });\n    return function () {\n      return map.remove();\n    };\n  }, []);\n  /*\n      Checks to see if there are technicians at the site are too close to each other\n   */\n\n  function checkTechnicanDistance(siteData, min_distance) {\n    var dangerous_technicians = new Set();\n    var siteFeatures = siteData.features;\n    var R = 6371e3; //radius of the earth (in meters)\n\n    /*\n         - Iterate through all of the technicians at the site and compare them to each other technician at the site.\n         - If Technicians are at the site at the same (techician.properties.tsecs)\n                - Compute the Haversine distance between each technician\n                - If each  the Haversine distance between two technicians is < min_distance, add the techicians to dangerous_techinicians Set\n    */\n\n    for (var t1 = 0; t1 < siteFeatures.length; t1++) {\n      for (var t2 = 0; t2 < siteFeatures.length; t2++) {\n        //t1, t2 are index pointers for the technicians are the site.\n        if (t1 != t2) {\n          var technician1 = siteFeatures[t1];\n          var technician2 = siteFeatures[t2];\n          var T1_tsec = technician1.properties.tsecs;\n          var T2_tsec = technician2.properties.tsecs; //check to see that the technicians are at the site at tehe same time\n\n          if (T1_tsec == T2_tsec) {\n            //calcualte Haversine distance\n            //get lat and lon coordinates for each technician\n            var T1_lon = technician1.geometry.coordinates[0];\n            var T2_lon = technician2.geometry.coordinates[0];\n            var T1_lat = technician1.geometry.coordinates[1];\n            var T2_lat = technician2.geometry.coordinates[1]; //convert lat to radians\n\n            var T1_lat_radians = T1_lat * Math.PI / 180;\n            var T2_lat_radians = T2_lat * Math.PI / 180; //calcualte change in lat and change in lon in radians\n\n            var delta_lat_radians = (T2_lat - T1_lat) * Math.PI / 180;\n            var delta_lon_radians = (T2_lon - T1_lon) * Math.PI / 180; //calcualte half the chord length in radians\n\n            var a = Math.sin(delta_lat_radians / 2) * Math.sin(delta_lat_radians) + Math.cos(T1_lat_radians) * Math.cos(T2_lat_radians) * Math.sin(delta_lon_radians / 2) * Math.sin(delta_lon_radians); //calcualte angluar distance in radians\n\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); //calcualte final distance\n\n            var distance = R * c; //console.log(distance)\n            //check if the two technicians are at an unsafe distance\n\n            if (distance < min_distance) {\n              console.log(\"UNSAFE DISTANCE\"); //add at technicans to the dangerous_technicians \n\n              dangerous_technicians.add(technician1.properties.name, technician2.properties.name);\n            }\n          }\n        }\n      }\n    }\n\n    return dangerous_technicians;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [\"Longitude: \", lng, \" | Latitude: \", lat, \" | Zoom: \", zoom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Map, \"KHG5XJGY1ntKp7U2Fjp1/oPO1iQ=\");\n\n_c = Map;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 210,\n  columnNumber: 17\n}, this), document.getElementById('app'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jacobehrlich/Desktop/Raptor_Maps_Challenge/client/src/index.js"],"names":["React","useRef","useEffect","useState","ReactDOM","mapboxgl","MapboxWorker","fetch","require","workerClass","accessToken","Map","mapContainer","lng","setLng","lat","setLat","zoom","setZoom","current_markers","map","container","current","style","center","on","site_id","delay","fetch_Requests","setInterval","getTechnicianData","url","then","res","json","data","status","body","responseObj","valid_site_id","ret","geoData","console","log","technicians_center","geoDataFeatures","features","length","marker_to_remove","pop","remove","i","marker","Marker","offset","rotation","properties","bearing","setLngLat","geometry","coordinates","addTo","push","flyTo","speed","dangerous_technicians","checkTechnicanDistance","alert_message","size","alert_message_technicians","tech","toString","alert","catch","err","addControl","NavigationControl","getCenter","toFixed","getZoom","siteData","min_distance","Set","siteFeatures","R","t1","t2","technician1","technician2","T1_tsec","tsecs","T2_tsec","T1_lon","T2_lon","T1_lat","T2_lat","T1_lat_radians","Math","PI","T2_lat_radians","delta_lat_radians","delta_lon_radians","a","sin","cos","c","atan2","sqrt","distance","add","name","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\n\nconst fetch = require('node-fetch');\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = \"pk.eyJ1IjoiZWhybGljaGoiLCJhIjoiY2ttdXNnNmh4MG1kajJ2cWVmbzBoZDZldSJ9.0ffP7axpAqza9qSwgm4vaA\"\n\nconst Map = () => {\n    const mapContainer = useRef();\n    \n    //intialize lng, lat, and zoom\n    const[lng,setLng] = useState(-70.9)\n    const[lat,setLat] = useState(42.35)\n    const[zoom, setZoom] = useState(5)\n\n\n    //need to keep track of markers on the map for removal\n    var current_markers = []\n\n    useEffect(() =>{\n\n        //intialize map\n        const map = new mapboxgl.Map({\n            container : mapContainer.current,\n            style : 'mapbox://styles/mapbox/streets-v11',\n            center : [lng, lat],\n            zoom: zoom\n        });\n\n        //After \n        map.on('load', () => {\n\n            \n            let site_id = 0;\n            var delay = 10000;\n            \n            var fetch_Requests = setInterval(function getTechnicianData(){\n\n                //create fetch url based on site_id parameter\n                let url = \"http://localhost:5000/api/v1/solar_farms/\" + site_id + \"/technicians\";           \n                fetch(url)\n                    //format response from the api,\n                    .then(res => res.json().then(data => ({status: res.status, body: data})))\n                    .then(responseObj => {\n                        if(!responseObj.body.valid_site_id){\n                            let ret = \"Invalid Site ID\";\n                            return ret\n                        }else{\n                            return responseObj.body\n                        }\n                    })\n                    .then(geoData => {\n                        console.log(geoData);\n                        let technicians_center = [0,0]\n                        if(geoData != \"Invalid Site ID\"){\n                            let geoDataFeatures = geoData.features;\n                            while(current_markers.length > 0){\n                                let marker_to_remove = current_markers.pop()\n                                marker_to_remove.remove();\n                            }\n                            for(var i = 0; i<geoDataFeatures.length; i++){\n                                let marker = new mapboxgl.Marker({\n                                    offset: [-120, 0],\n                                    rotation: geoDataFeatures[i].properties.bearing\n                                }).setLngLat(geoDataFeatures[i].geometry.coordinates).addTo(map);\n        \n                                current_markers.push(marker)\n        \n                                technicians_center[0] += geoDataFeatures[i].geometry.coordinates[0]\n                                technicians_center[1] += geoDataFeatures[i].geometry.coordinates[1]\n                            }\n        \n                            technicians_center[0] /= geoDataFeatures.length\n                            technicians_center[1] /= geoDataFeatures.length\n        \n                            console.log(technicians_center)\n                            map.flyTo({\n                                center: technicians_center,\n                                speed:  1.0,\n                                zoom: 12\n                            })\n                            let dangerous_technicians = checkTechnicanDistance(geoData, 304.8)\n                            let alert_message;\n\n                            if(dangerous_technicians.size > 0){\n                                let alert_message_technicians = \"\"\n                                for(const tech of dangerous_technicians){\n                                    alert_message_technicians += tech + \" \"\n                                }\n                                alert_message = \"Unsafe Conditions\\nSite: \" +  site_id.toString() + \"\\nTechncians: \" +  alert_message_technicians\n\n                                console.log(alert_message)\n                                alert(alert_message);\n                            }\n                            //console.log(geoData.dangerous_technicians)\n                        }\n                        \n                    })\n                    .catch(err => console.log(\"Error: \", err))\n                    site_id += 1;\n                    if(site_id > 0){\n                        delay = 3000\n                    }\n                }, delay)\n            \n            });\n\n\n        map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n        map.on('move', () =>{\n            setLng(map.getCenter().lng.toFixed(4));\n            setLat(map.getCenter().lat.toFixed(4));\n            setZoom(map.getZoom().toFixed(2));\n        });\n        return () => map.remove();\n    }, []);\n\n\n    /*\n        Checks to see if there are technicians at the site are too close to each other\n     */\n    function checkTechnicanDistance(siteData, min_distance){\n\n        let dangerous_technicians = new Set()\n        let siteFeatures = siteData.features\n\n        const R = 6371e3 //radius of the earth (in meters)\n\n        /*\n             - Iterate through all of the technicians at the site and compare them to each other technician at the site.\n             - If Technicians are at the site at the same (techician.properties.tsecs)\n                    - Compute the Haversine distance between each technician\n                    - If each  the Haversine distance between two technicians is < min_distance, add the techicians to dangerous_techinicians Set\n        */ \n        for(var t1=0; t1<siteFeatures.length; t1++){\n            for(var t2=0; t2<siteFeatures.length; t2++){\n                \n                //t1, t2 are index pointers for the technicians are the site.\n                if(t1 != t2){\n                    let technician1 = siteFeatures[t1]\n                    let technician2 = siteFeatures[t2]\n    \n                    let T1_tsec = technician1.properties.tsecs\n                    let T2_tsec = technician2.properties.tsecs\n    \n                    \n                    //check to see that the technicians are at the site at tehe same time\n                    if(T1_tsec == T2_tsec){\n\n                        //calcualte Haversine distance\n                        \n                        //get lat and lon coordinates for each technician\n                        let T1_lon = technician1.geometry.coordinates[0]\n                        let T2_lon = technician2.geometry.coordinates[0]\n    \n                        let T1_lat = technician1.geometry.coordinates[1]\n                        let T2_lat = technician2.geometry.coordinates[1]\n                        \n                        //convert lat to radians\n                        let T1_lat_radians = T1_lat * Math.PI/180\n                        let T2_lat_radians = T2_lat * Math.PI/180\n                        \n                        //calcualte change in lat and change in lon in radians\n                        let delta_lat_radians = (T2_lat - T1_lat) * Math.PI/180\n                        let delta_lon_radians = (T2_lon - T1_lon) * Math.PI/180\n                        \n                        //calcualte half the chord length in radians\n                        let a = Math.sin(delta_lat_radians/2)  * Math.sin(delta_lat_radians) + \n                                Math.cos(T1_lat_radians) * Math.cos(T2_lat_radians) *\n                                Math.sin(delta_lon_radians/2) * Math.sin(delta_lon_radians);\n                        \n                        //calcualte angluar distance in radians\n                        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n                        \n                        //calcualte final distance\n                        let distance = R * c\n\n\n                        //console.log(distance)\n\n                        //check if the two technicians are at an unsafe distance\n                        if(distance < min_distance){\n                            console.log(\"UNSAFE DISTANCE\");\n                            //add at technicans to the dangerous_technicians \n                            dangerous_technicians.add(technician1.properties.name, technician2.properties.name);\n                        }\n    \n                    }\n                \n    \n    \n                }\n            }\n        }\n        return dangerous_technicians;\n    }\n\n    return(\n        <div>\n            <div className =\"sidebar\">\n                Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n            </div>\n            <div className=\"map-container\" ref={mapContainer} />\n        </div>\n    );\n}\nReactDOM.render(<Map />, document.getElementById('app'));"]},"metadata":{},"sourceType":"module"}